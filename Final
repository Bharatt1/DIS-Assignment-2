using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Text;
using System.Linq;

namespace Assignment2_Fall2020
{
    class Program
    {


        static void Main(string[] args)
        {
            Console.WriteLine("Question 1");
            int n = 7;
            PrintPatternAnyComplexity(n);
            PrintPatternLinearComplexity(n);


            Console.WriteLine("Question 2");
            int[] array1 = new int[] { 1, 3, 5, 4, 7 };
            int result = LongestSubSeq(array1);
            Console.WriteLine(result);
            Console.ReadLine();

            Console.WriteLine("Question 3");
            int[] array2 = new int[] { 1, 2, 3, 4, 5, 5 };
            PrintTwoParts(array2);
            Console.ReadLine();


            Console.WriteLine("Question 4");
            int[] array3 = new int[] { -4, -1, 0, 3, 10 };
            int[] result2 = SortedSquares(array3);
            //Write code to print the result array here

            Console.WriteLine("Question 5");
            int[] nums1 = { 4, 2, 2, 4 };
            int[] nums2 = { 2, 2 };
            int[] intersect1 = Intersect(nums1, nums2);
            //Write code to print the result array here


            Console.WriteLine("Question 6");
            int[] arr = new int[] { 1, 2, 2, 1, 1, 3 };
            Console.WriteLine(UniqueOccurrences(arr));
            Console.ReadLine();

            Console.WriteLine("Question 7");
            int[] numbers = { 0, 1, 3, 50, 75 };
            int lower = 0;
            int upper = 99;
            List<String> ResultList = Ranges(numbers, lower, upper);
            foreach (string s in ResultList)
            {
                Console.WriteLine(s);
            }
            Console.ReadLine();
            //Write code to print list here

            Console.WriteLine("Question 8");
            //string[] names = new string[] { "pes", "fifa", "gta", "pes(2019)" };
            string[] names = new string[] { "wano", "wano(1)", "wano(2)", "wano" };
            string[] namesResult = UniqFolderNames(names);
            Console.Write("Output = ");
            Console.Write("[");
            foreach (string x in namesResult)
            {
                Console.Write(x + ",");
            }
            Console.Write("]");


        }

        public static void PrintPatternAnyComplexity(int n)

        {
            try
            {
                int i, j, k; // initialize 3 variables as integers
                for (i = 1; i <= n; i++) // traverse through elements of the array until we reach n
                {
                    for (j = 1; j <= i; j++) // traverse through elements of the previous function
                    {
                        Console.Write(""); // we do not input any space for a normal triangle
                    }
                    for (k = 1; k <= i; k++) // traverse through the elements and prints out *
                    {
                        Console.Write("*"); // prints out * for each time k is smaller than equal to i
                    }
                    Console.WriteLine(""); // helps space things out
                }
                Console.ReadLine();

            }
            catch (Exception)
            {

                throw;
            }

        }
        public static void PrintPatternLinearComplexity(int n)

        {
            try
            {
                for (int i = 1; i <= n; i++) // traverse through elements 
                {
                    Console.WriteLine(new String('*', i)); 
                    // this helps eliminate inner loops through using the string (char, count) constructor to prints out * in accordance to i in each line, where i increments till it reaches n
                }
                Console.ReadLine();

            }
            catch (Exception)
            {

                throw;
            }

        }


        public static int LongestSubSeq(int[] nums)
        {
            try
            {
                int n = nums.Length; // declaring that n is equal to length of array

                int max = 1, len = 1; // declare max and len to store the longest increasing subarray, len goes through loops

                for (int i = 1; i < n; i++) // traverse through element to find increasing subarray
                {

                    if (nums[i] > nums[i - 1]) // adds elements into len to find increasing subarray
                        len++;
                    else
                    {
                        if (max < len) // throughout the loop, if max is lower than len of the subarray
                            max = len; // update max to equal to increasing subarray

                        len = 1; // restart len is equal to 1 and go through again
                    }
                }
                if (max < len) // leaving the for-loop, if max is lower than the length of subarray
                    max = len; // update max to equal len
                return max; // finally, return max, which is the length of the increasing subarray
            }

            catch (Exception) 
            {
                return 0; // if there isn't any increasing subarrays, return 0
                throw;
            }
        
        }
        static int PrintTwoParts2(int[] array2) // this is used to find the split point
        {
            try
            {
                int leftSum = 0; // we split the array into two sides, starting with left
                int n = array2.Length;  // we let n equal to the array length
                for (int i = 0; i < n; i++) // traverse through all elements in array
                    leftSum += array2[i]; // computes sum of the array

                int rightSum = 0; // compute right sum

                for (int i = n - 1; i >= 0; i--) // we then traverse through the elements, taking an additional element from the right side 
                {
                    rightSum += array2[i]; // compute the right sum
                    leftSum -= array2[i]; // compute the left sum
                    if (rightSum == leftSum) // if left and right sum are equal
                        return i; // return i, which is the split point between the array
                }
                return -1; // otherwise return -1
            }
            catch (Exception)
            {

                throw;
            }
        }
            public static void PrintTwoParts(int[] array2) // we use this function to print out the split arrays
            {
                int n = array2.Length; // we declare that n is equal to array length
                int splitPoint = PrintTwoParts2(array2); // and we declare the split point found in the previous function

                if (splitPoint == -1 || splitPoint == n) // if an adequate splitpoint isn't found
                {
                    Console.Write("Not Possible"); 
                    return;
                }
                for (int i = 0; i < n; i++) // traverse through element to split array through the split point
                {
                    if (splitPoint == i) // going through the elements, when it reaches the split point, it will stop and print lines
                        Console.WriteLine();

                    Console.Write(array2[i] + " "); // prints out the equally split arrays
                }
            Console.WriteLine();
        }
        

        public static int[] SortedSquares(int[] A)
        {
            try
            {
                int n = A.Length;

                // First convert each array 
                // elements into its square 
                for (int i = 0; i < n; i++)
                    A[i] = A[i] * A[i];

                // Sort an array using 
                // "inbuild sort function" 
                // in Arrays class. 
                Array.Sort(A);

                for (int i = 0; i < n; i++)
                {
                    Console.Write(A[i] + " ");
                }
                Console.WriteLine();
                Console.ReadLine();
            }
            catch (Exception)
            {

                throw;
            }
            return null;
        }
        public static int[] Intersect(int[] nums1, int[] nums2)
        {
            try
            {
                //Initializes empty hash set hs
                HashSet<int> hs = new HashSet<int>();

                //Iterate through the first array and put every element of the first array in the set; For		every element x of the second array, do the following: search x in the set hs. If x is		present, then print it

                for (int i = 0; i < nums1.Length; i++)
                    hs.Add(nums1[i]);

                for (int i = 0; i < nums2.Length; i++)
                    if (hs.Contains(nums2[i]))
                        Console.Write(nums2[i] + " ");
                Console.WriteLine();
                Console.ReadLine();
            }
            catch
            {
                throw;
            }

            return new int[] { };
        }


        public static bool UniqueOccurrences(int[] arr)
        {
            try
            {
                //Group each unique value and count the occurrence of each value
                return arr.GroupBy(x => x).GroupBy(x => x.Count()).All(x => x.Count() == 1);

            }
            catch (Exception)
            {

                throw;
            }
            return default;
        }
        public static List<String> Ranges(int[] numbers, int lower, int upper)
        {
            try
            {
                //new string list to store results
                List<string> range = new List<string>();
                //temp string to store list input
                string val = "";
                //index array at 0
                int a = 0;
                //start for loop from lower limit to upper limit
                for (int i = lower; i < upper; i++)
                {
                    //check to see if we have reached final array index
                    if (a < numbers.Length)
                    {
                        //check if increment matches indexed value
                        if (i == numbers[a])
                        {
                            if (numbers[a] != lower)
                            {
                                //increment lower index
                                if (i == lower + 1)
                                {
                                    //missing number so we make it a string
                                    val = lower.ToString();
                                }
                                else
                                {
                                    //if there is a range of values we start with the current lower limit to the current increment -1
                                    //current increement would be the indexed array value so we ignore it
                                    val = lower.ToString() + "->" + (i - 1).ToString();
                                }
                                //add the temp string to the list and we move forward
                                range.Add(val);
                                //set new lower limit to current increment
                                lower = i;
                            }
                            //increment indexed value
                            a++;
                            //incremement lower index
                            lower++;
                        }
                    }
                }
                //after checking all the array values we now add one to the highest value in the array and create an additional range to the upper limit
                if (numbers[numbers.Length - 1] != upper)
                {
                    val = (numbers[numbers.Length - 1] + 1).ToString() + "->" + upper.ToString();
                    range.Add(val);
                }
                return range;
            }
            catch (Exception)
            {

                throw;
            }
            return default;
        }
        public static string[] UniqFolderNames(string[] names)
        {
            try
            {
                int n = names.Length;
                string[] output = new string[n];
                string name;
                string newName;
                //add first name in input array to first location in output array
                output[0] = names[0];

                for (int i = 1; i < n; i++)
                {
                    name = names[i];
                    bool alreadyFound = false;
                    string toAdd = "";
                    //check if the name is in the output array
                    for (int j = 0; j < i; j++)
                    {
                        //if name is already in output array
                        if (name.Equals(output[j]))
                        {
                            //add the suffix to the name
                            int suffix = 1;
                            newName = name + "(" + suffix.ToString() + ")";
                            Console.WriteLine("New name: " + newName);
                            //check if the new name is in the output array
                            for (int k = 0; k < i; k++)
                            {
                                //if the new name is already in the output folder, keep adding 1 to the suffix until the new name is not found in the output array
                                if (newName.Equals(output[k]))
                                {
                                    suffix = suffix + 1;
                                    newName = name + "(" + suffix.ToString() + ")";
                                }
                            }
                            toAdd = newName;
                            alreadyFound = true;
                        }
                        //if name is not in output array, add name to output array
                        else
                        {
                            if (!alreadyFound)
                            {
                                toAdd = name;
                                alreadyFound = true;
                            }
                        }
                    }
                    output[i] = toAdd;
                    alreadyFound = false;

                }
                return output;
            }
            catch (Exception)
            {
                throw;
            }
            return default;
        }

    }
}





